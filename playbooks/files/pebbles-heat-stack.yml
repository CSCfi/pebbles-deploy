---
heat_template_version: 2015-10-15

description: >
  Provision resources for a standard Pebbles cluster. Assumes volumes are
  provisioned in separate stacks and attached outside heat.

parameters:
  env_name:
    description: >
      A name for the Pebbles environment to be used for naming resources.
    type: string
    default: { get_param: 'OS::stack_name' }
  jump_host_allow_ports:
    description: >
      Which ports to allow connections to on thejump_host host.
    type: comma_delimited_list
  jump_host_allow_cidrs:
    description: >
      The CIDRs of the networks where the bastion host should be accessible
      from.
    type: comma_delimited_list
  secgroup_ext_access_rules:
    description: >
      Rules for the security group that governs external access to the system.
    type: json
  pebbles_network_cidr:
    description: >
      What CIDR to use for the dedicated cluster network. Must be unique within the tenant.
    type: string
  pebbles_network_dns_servers:
    description: >
      What DNS servers to use in the dedicated cluster network.
    type: comma_delimited_list
  pebbles_router:
    description: >
      The router to which the dedicated cluster network should be connected to
      for external access.
    type: string
  key_name:
    description: >
      The name of the SSH key to initially insert into VMs.
    type: string
  jump_host_vm_image:
    description: >
      What OpenStack image to use for the bastion host.
    type: string
  jump_host_vm_flavor:
    description: >
      What OpenStack flavor to use for the bastion host.
    type: string
  jump_host_vm_ip:
    description: >
      Private IP for the jump host
    type: string
  jump_host_cloud_config:
    description: >
      Configuration for cloud-init for the bastion host.
    type: json
  pebbles_allow_ports:
    description: >
      Which ports to allow connections to on the Pebbles host.
    type: comma_delimited_list
  pebbles_allow_cidrs:
    description: >
      The CIDRs of the networks where the Pebbles host should be accessible
      from via HTTP(S).
    type: comma_delimited_list
  pebbles_vm_image:
    description: >
      What OpenStack image to use for master hosts.
    type: string
  pebbles_vm_flavor:
    description: >
      What OpenStack flavor to use for master VMs.
    type: string
  pebbles_vm_ip:
    description: >
      Private IP for the server host
    type: string

resources:

  #-----------------------------------
  # Security groups
  #-----------------------------------

  secgroup_jump:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: "bastion"
      rules:
        repeat:
          for_each:
            <%port%>: { get_param: jump_host_allow_ports }
            <%cidr%>: { get_param: jump_host_allow_cidrs }
          template:
            protocol: tcp
            port_range_min: <%port%>
            port_range_max: <%port%>
            remote_ip_prefix: <%cidr%>

  secgroup_common:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: "common"
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_resource: secgroup_jump }
        - remote_mode: remote_group_id
          protocol: icmp

  secgroup_infra:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: infra
      rules:
        - remote_mode: remote_group_id


## All Pebbles Instances need to be ac

  secgroup_pebbles:
    type: secgroup.yaml
    properties:
      env_name: { get_param: env_name }
      name_suffix: pebbles
      rules:
        repeat:
          for_each:
            <%port%>: { get_param: pebbles_allow_ports }
            <%cidr%>: { get_param: pebbles_allow_cidrs }
          template:
            protocol: tcp
            port_range_min: <%port%>
            port_range_max: <%port%>
            remote_ip_prefix: <%cidr%>

  #-----------------------------------
  # Dedicated cluster network
  #-----------------------------------

  pebbles_network:
    type: OS::Neutron::Net
    properties:
       name:
         str_replace:
            template: env_name-name_suffix
            params:
              env_name: { get_param: env_name }
              name_suffix: "network"

  pebbles_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: pebbles_network }
      cidr: { get_param: pebbles_network_cidr }
      dns_nameservers: { get_param: pebbles_network_dns_servers }

  pebbles_subnet_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_param: pebbles_router }
      subnet: { get_resource: pebbles_subnet }

  #-----------------------------------
  # Jump Host VM
  #-----------------------------------

  jump_host_cloud_config_resource:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config: { get_param: jump_host_cloud_config }

  jump_host:
    type: OS::Nova::Server
    depends_on: "pebbles_subnet"
    properties:
      name:
        str_replace:
          template: env_name-name_suffix
          params:
            env_name: { get_param: env_name }
            name_suffix: "jump"
      image: { get_param: jump_host_vm_image }
      networks:
        - network: { get_resource: pebbles_network }
          fixed_ip: { get_param: jump_host_vm_ip }
      flavor: { get_param: jump_host_vm_flavor }
      metadata:
        group: "jump_host"
        stack: { get_param: env_name }
      key_name: { get_param: key_name }
      security_groups:
        - { get_resource: secgroup_jump}
      user_data: { get_resource: jump_host_cloud_config_resource }
      user_data_format: RAW


  #-----------------------------------
  # Actual Pebbles server VM
  #-----------------------------------

  pebbles_host:
    type: OS::Nova::Server
    depends_on: "pebbles_subnet"
    properties:
      name:
        str_replace:
          template: env_name-name_suffix
          params:
            env_name: { get_param: env_name }
            name_suffix: "server"
      image: { get_param: pebbles_vm_image }
      networks:
        - network: { get_resource: pebbles_network }
          fixed_ip: { get_param: pebbles_vm_ip }
      flavor: { get_param: pebbles_vm_flavor }
      metadata:
        groups: "docker_host"
        stack: { get_param: env_name }
      key_name: { get_param: key_name }
      security_groups:
        - { get_resource: secgroup_common }
        - { get_resource: secgroup_infra }
        - { get_resource: secgroup_pebbles }

outputs:
