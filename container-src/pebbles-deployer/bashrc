# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    source /etc/bashrc
fi

# Define colour macros and utility functions for our custom bash prompt
YELLOW="$(tput setaf 3)"
GREEN="$(tput setaf 2)"
BLUE="$(tput setaf 4)"
BLACK_BG="$(tput setab 0)"
BLUE_BG="$(tput setab 4)"
RED_BG="$(tput setab 1)"
RESET="$(tput sgr0)"

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/*\(.*\)/\1/' -e 's/ //g'
}

short_cwd() {
    echo $PWD | sed -e "s|^$HOME|~|g"
}

branch-info() {
    for repo in pebbles pebbles-deploy pebbles-environments pebbles-frontend pebbles-admin-frontend; do
        branch=$(cd /opt/deployment/$repo && parse_git_branch)
        num_modified=$(cd /opt/deployment/$repo && git status --porcelain | wc -l)
        if [[ num_modified -eq 0 ]]; then
            printf "%23s: %s\n" $repo $branch
        else
            printf "%23s: %s (modified: %d)\n" $repo $branch $num_modified
        fi
    done
}

restart-pebbles() {

    if [ -z "$1" ]; then
        # by default, restart workloads that run our source code (api, frontends, worker) and wait for completion
        for workload in statefulset/worker deployment/{frontend,admin-frontend,api}; do
            oc rollout restart $workload
            oc rollout status --timeout=300s $workload
        done
    else
        if [ "$1" = "worker" ]; then
            oc rollout restart statefulset/worker
            oc rollout status --timeout=300s statefulset/worker
        else
            oc rollout restart deployment/$1
            oc rollout status --timeout=300s deployment/$1
        fi
    fi
}

# extract keys from Helm values on ramdisk
extract-from-helm-values() {
    cat /dev/shm/$ENV_NAME/values.yaml \
    | python -c 'import json, sys, yaml ; y=yaml.safe_load(sys.stdin.read()) ; json.dump(y, sys.stdout)' \
    | jq -r ".$1"
}

# open psql in database pod
db-shell() {
    oc rsh deployment/db bash -c 'psql -d pebbles'
}

# open psql in external database
db-shell-external() {
    # extract database host and port from Helm values
    export PGHOST=$(extract-from-helm-values databaseHost)
    export PGPORT=$(extract-from-helm-values databasePort)

    # extract db password from pebbles secret
    db_password=$(oc get secret pebbles -o json | jq -r '.data["database-password"]' | base64 -d)

    # create a password file
    export PGPASSFILE=/dev/shm/$ENV_NAME/.pgpass
    touch $PGPASSFILE && chmod 600 $PGPASSFILE
    # hostname:port:database:username:password
    echo "$PGHOST:$PGPORT:pebbles:pebbles:$db_password" > $PGPASSFILE
    unset db_password

    # finally open the shell
    psql -U pebbles

    rm $PGPASSFILE
}

# Useful when developing Helm charts when generated values.yaml needs to be updated after inventory changes.
refresh-ramdisk() {
    (cd /opt/deployment/pebbles-deploy && ansible-playbook playbooks/initialize_ramdisk.yml)
}

# Alias to convert yaml to json using python.
# example: cat /dev/shm/$ENV_NAME/values.yaml | yaml2json | jq -r '.clusterKubeconfig' > ~/.kube/config-clusters
alias yaml2json="python3 -c 'import sys, yaml, json; y=yaml.safe_load(sys.stdin.read()); print(json.dumps(y))'"

# Alias to list application images using manage.py. Turn off debug to get clean output
list-application-images() {
    oc rsh -c api deployment/api bash -c 'PB_DEBUG=0 ./manage.py list_application_images'
}

source init_env.bash

source deploy_functions.bash

echo
echo "Branches, view with 'branch-info'":
echo
branch-info
echo
echo "Deploy K3s on OpenStack followed by Pebbles:"
echo
echo "  cd pebbles-deploy"
echo "  ansible-playbook playbooks/site_k3s.yml"
echo "  helm-install-pebbles && initialize-pebbles $(openssl rand -hex 16)"
echo
echo "Build, install and initialize Pebbles in an empty namespace with initial data defined in inventory:"
echo
echo "  install-pebbles"
echo
echo "Upgrade an existing installation:"
echo
echo "  helm-upgrade-pebbles [-r] [options for Helm]"
echo "    where -r will also update the values.yaml with 'refresh-ramdisk'"
echo
echo "Completely remove a development environment, including all data:"
echo
echo "  helm delete pebbles; oc delete all --all; oc delete pvc --all; oc delete secret pebbles"
echo
echo "To restart pods"
echo "OPTION can be api/db/worker/frontend/admin-frontend/logstash/oauth2-proxy. If empty restarts all."
echo
echo "  restart-pebbles [OPTION]"
echo
echo "To enter database shell"
echo
echo "  db-shell"
echo
echo "refresh helm values from pebbles-environments"
echo
echo "  refresh-ramdisk"
echo
