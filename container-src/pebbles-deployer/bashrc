# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    source /etc/bashrc
fi

# Define colour macros and utility functions for our custom bash prompt
YELLOW="$(tput setaf 3)"
GREEN="$(tput setaf 2)"
BLUE="$(tput setaf 4)"
BLACK_BG="$(tput setab 0)"
BLUE_BG="$(tput setab 4)"
RED_BG="$(tput setab 1)"
RESET="$(tput sgr0)"

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/*\(.*\)/\1/' -e 's/ //g'
}

short_cwd() {
    echo $PWD | sed -e "s|^$HOME|~|g"
}

branch-info() {
    for repo in pebbles pebbles-deploy pebbles-environments pebbles-frontend pebbles-admin-frontend; do
        branch=$(cd /opt/deployment/$repo && parse_git_branch)
        num_modified=$(cd /opt/deployment/$repo && git status --porcelain | wc -l)
        if [[ num_modified -eq 0 ]]; then
            printf "%23s: %s\n" $repo $branch
        else
            printf "%23s: %s (modified: %d)\n" $repo $branch $num_modified
        fi
    done
}

restart-pebbles() {

    if [ -z "$1" ]; then
        # by default, restart workloads that run our source code (api, frontends, worker) and wait for completion
        for workload in statefulset/worker deployment/{frontend,admin-frontend,api}; do
            oc rollout restart $workload
            oc rollout status --timeout=300s $workload
        done
    else
        if [ "$1" = "worker" ]; then
            oc rollout restart statefulset/worker
            oc rollout status --timeout=300s statefulset/worker
        else
            oc rollout restart deployment/$1
            oc rollout status --timeout=300s deployment/$1
        fi
    fi
}

# extract keys from Helm values on ramdisk
extract-from-helm-values() {
    cat /dev/shm/$ENV_NAME/values.yaml \
    | python -c 'import json, sys, yaml ; y=yaml.safe_load(sys.stdin.read()) ; json.dump(y, sys.stdout)' \
    | jq -r ".$1"
}

# Alias to re-encrypt a sops encrypted file for given recipient (=public key). Uses the default Age key for decryption.
sops-rotate-age-key() {
    new_recipient=$1
    if [[ -z "$new_recipient" ]]; then
        echo "usage: sops-rotate-age-key <new_recipient> <encrypted_file> [<encrypted_file>]"
        return 1
    fi
    shift
    # test new recipient
    echo "test" | age -r $new_recipient > /dev/null
    if [[ $? != 0 ]]; then
        echo "'$new_recipient' does not seem to be a valid age public key"
        return 1
    fi
    # process remaining arguments as files
    for secret_file in $*; do
        echo "re-encrypting file $secret_file"
        sops -d $secret_file \
        | sops -e --age $new_recipient --input-type "${secret_file##*.}" --output $secret_file /dev/stdin
    done
}

# open psql in database pod
db-shell() {
    oc rsh deployment/db bash -c 'psql -d pebbles'
}

# open psql in external database
db-shell-external() {
    # extract database host and port from Helm values
    export PGHOST=$(extract-from-helm-values databaseHost)
    export PGPORT=$(extract-from-helm-values databasePort)

    # extract db password from pebbles secret
    db_password=$(oc get secret pebbles -o json | jq -r '.data["database-password"]' | base64 -d)

    # create a password file
    export PGPASSFILE=/dev/shm/$ENV_NAME/.pgpass
    touch $PGPASSFILE && chmod 600 $PGPASSFILE
    # hostname:port:database:username:password
    echo "$PGHOST:$PGPORT:pebbles:pebbles:$db_password" > $PGPASSFILE
    unset db_password

    # finally open the shell
    psql -U pebbles

    rm $PGPASSFILE
}

# open psql in DBaaS
pb-db-shell() {
    # extract database host and port from Helm values
    export PGHOST=$(yq -r '.databaseHost' ${ENV_BASE_DIR}/values.yaml)
    export PGPORT=$(yq -r '.databasePort' ${ENV_BASE_DIR}/values.yaml)
    export PGDATABASE=$(yq -r '.databaseName' ${ENV_BASE_DIR}/values.yaml)
    export PGUSER=$(yq -r '.databaseUser' ${ENV_BASE_DIR}/values.yaml)

    # Explicitly require SSL to avoid connecting over plain TCP
    export PGSSLMODE=require

    # defaults for databases with default user and database name
    [[ $PGDATABASE == 'null' ]] && export PGDATABASE=pebbles
    [[ $PGUSER == 'null' ]] && export PGUSER=pebbles

    # extract db password from database secret file
    if [[ ! -e ${ENV_BASE_DIR}/secrets-database.sops.yaml ]]; then
        echo "ERROR: database password needs to be stored in secrets-database.sops.yaml"
        return 1
    fi
    db_password=$(sops -d --extract '["databasePassword"]' ${ENV_BASE_DIR}/secrets-database.sops.yaml)

    # create a password file
    export PGPASSFILE=/dev/shm/$ENV_NAME/.pgpass
    touch $PGPASSFILE && chmod 600 $PGPASSFILE
    # hostname:port:database:username:password
    echo "$PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$db_password" > $PGPASSFILE
    unset db_password

    # finally open the shell
    psql $*

    # clean up
    rm $PGPASSFILE
    unset PGHOST PGPORT PGDATABASE PGUSER PGPASSFILE PGSSLMODE
}

# Useful when developing Helm charts when generated values.yaml needs to be updated after inventory changes.
refresh-ramdisk() {
    (cd /opt/deployment/pebbles-deploy && ansible-playbook playbooks/initialize_ramdisk.yml)
}

# Alias to convert yaml to json using python.
# example: cat /dev/shm/$ENV_NAME/values.yaml | yaml2json | jq -r '.clusterKubeconfig' > ~/.kube/config-clusters
alias yaml2json="python3 -c 'import sys, yaml, json; y=yaml.safe_load(sys.stdin.read()); print(json.dumps(y))'"

# Alias to change working directory to environment base directory
alias cde='cd $ENV_BASE_DIR'

# Alias to list application images using manage.py. Turn off debug to get clean output
list-application-images() {
    oc rsh -c api deployment/api bash -c 'PB_DEBUG=0 ./manage.py list_application_images'
}

print_oneliners_openstack() {
    echo "List servers"
    echo
    echo "  openstack server list"
    echo
    echo "List Heat stacks"
    echo
    echo "  openstack stack list"
    echo
    echo "List volumes"
    echo
    echo "  openstack volume list"
    echo
    echo "List floating IPs"
    echo
    echo "  openstack floating ip list"
    echo
}

print_oneliners_k3s() {
    echo "Deploy K3s on OpenStack"
    echo
    echo "  cd pebbles-deploy"
    echo "  ansible-playbook playbooks/site_k3s.yml"
    echo
    echo "Watch nodes and pods in the system"
    echo
    echo "  watch -n 10 'oc get nodes -o wide; oc get pods -o wide -A'"
    echo
    echo "See autoscaler logs"
    echo
    echo "  ssh $ENV_NAME-jump journalctl -f -u k3s-autoscaler --since -1h"
    echo
}

print_oneliners_gitlab_runner() {
    echo "Deploy GitLab runner on OpenStack"
    echo
    echo "  cd pebbles-deploy"
    echo "  ansible-playbook playbooks/site_gitlab_runner.yml"
    echo
}

print_oneliners_db_farm() {
    echo "Deploy DB Farm on OpenStack"
    echo
    echo "  cd pebbles-deploy"
    echo "  ansible-playbook playbooks/site_db_farm.yml"
    echo
}

print_oneliners_pebbles() {
    echo "Build, install and initialize Pebbles in an empty namespace with initial data defined in inventory"
    echo
    echo "  install-pebbles"
    echo
    echo "Upgrade an existing installation"
    echo
    echo "  helm-upgrade-pebbles [-r] [options for Helm]"
    echo "    where -r will also update the values.yaml with 'refresh-ramdisk'"
    echo
    echo "Completely remove a development environment, including all data"
    echo
    echo "  helm delete pebbles; oc delete all --all; oc delete pvc --all; oc delete secret pebbles"
    echo
    echo "Restart a component (like api/frontend/worker/...). If component name is empty, restart all components."
    echo
    echo "  restart-pebbles [component name]"
    echo
    echo "Enter a database shell (running in the same namespace)"
    echo
    echo "  db-shell"
    echo
    echo "Enter a database shell (hosted externally)"
    echo
    echo "  db-shell-external"
    echo
    echo "Refresh helm values from pebbles-environments"
    echo
    echo "  refresh-ramdisk"
    echo
}

print_oneliners_helm() {
    echo "Build, install and initialize Pebbles in an empty namespace with initial data defined in inventory"
    echo
    echo "  install-pebbles"
    echo
    echo "Create or upgrade a new or existing installation"
    echo
    echo "  helm-upgrade-pebbles [options for Helm]"
    echo
    echo "Initialize system with initial data"
    echo
    echo "  pb-initialize-database [initial data files]"
    echo
    echo "Completely remove a development environment, including all data"
    echo
    echo "  helm delete pebbles; oc delete all --all; oc delete pvc --all; oc delete secret pebbles"
    echo
    echo "Restart a component (like api/frontend/worker/...). If component name is empty, restart all components."
    echo
    echo "  restart-pebbles [component name]"
    echo
    echo "Enter a DBaaS database shell"
    echo
    echo "  pb-db-shell"
    echo
    echo "Refresh helm values from pebbles-environments"
    echo
    echo "  refresh-ramdisk"
    echo
}

source bin/init_env.bash

source bin/deploy_functions.bash

echo "Oneliners"
echo "---------"
echo

case $DEPLOYMENT_TYPE in
helm)
    print_oneliners_helm
    ;;
k3s)
    print_oneliners_k3s
    print_oneliners_openstack
    ;;
gitlab-runner-heat)
    print_oneliners_gitlab_runner
    print_oneliners_openstack
    ;;
db-farm)
    print_oneliners_db_farm
    print_oneliners_openstack
    ;;
esac

echo
echo "Branches, view with 'branch-info'":
echo "---------------------------------"
echo
branch-info
echo
