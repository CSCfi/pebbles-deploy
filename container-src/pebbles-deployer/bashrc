# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    source /etc/bashrc
fi

# Define colour macros and utility functions for our custom bash prompt
YELLOW="$(tput setaf 3)"
GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/*\(.*\)/\1/' -e 's/ //g'
}

short_cwd() {
    echo $PWD | sed -e "s|^$HOME|~|g"
}

branch-info() {
    for repo in pebbles pebbles-deploy pebbles-environments pebbles-frontend; do
        branch=$(cd /opt/deployment/$repo && parse_git_branch)
        printf "%23s: %s\n" $repo $branch
    done
}

restart-pebbles() {

    if [ -z "$1" ]; then
        # by default, restart workloads that run our source code (api, frontend, worker)
        oc rollout restart deployment/{api,frontend}
        oc rollout restart statefulset/worker
    else 
        if [ "$1" = "worker" ]; then
           oc rollout restart statefulset/worker
        else
           oc rollout restart deployment/$1
        fi
    fi
}

db-shell() {
   oc rsh $(oc get pod -o name -l name=db) bash -c 'psql -d pebbles'
}

# Useful when developing Helm charts when generated values.yaml needs to be updated after inventory changes.
refresh-ramdisk() {
  (cd /opt/deployment/pebbles-deploy && ansible-playbook playbooks/initialize_ramdisk.yml)
}

# All non-printable output should be enclosed in '\[\]' to avoid bash evaluating the prompt length wrong,
# which will in turn cause line wrapping issues
# https://unix.stackexchange.com/questions/105958/terminal-prompt-not-wrapping-correctly
export PS1='\[${YELLOW}\]${ENV_NAME}\[${RESET}\] $(short_cwd) \[${GREEN}\]($(parse_git_branch))\[${RESET}\] > '

source init_env.bash

source deploy_functions.bash

echo
echo "Branches, view with 'branch-info'":
echo
branch-info
echo
echo "Deploy K3s on OpenStack followed by Pebbles:"
echo
echo "  cd pebbles-deploy"
echo "  ansible-playbook playbooks/site_k3s.yml"
echo "  helm-install-pebbles && initialize-pebbles $(openssl rand -hex 16)"
echo
echo "Build, install and initialize Pebbles in an empty namespace with initial data defined in inventory:"
echo
echo "  install-pebbles"
echo
echo "Upgrade an existing installation:"
echo
echo "  helm-upgrade-pebbles [-r] [options for Helm]"
echo "    where -r will also update the values.yaml with 'refresh-ramdisk'"
echo
echo "Completely remove a development environment, including all data:"
echo
echo "  helm delete pebbles; oc delete all --all; oc delete pvc --all; oc delete secret pebbles"
echo
echo "To restart pods"
echo "OPTION can be api/db/worker/frontend/logstash/oauth2-proxy. If empty restarts all."
echo
echo "  restart-pebbles [OPTION]"
echo
echo "To enter database shell"
echo
echo "  db-shell"
echo
echo "refresh helm values from pebbles-environments"
echo
echo "  refresh-ramdisk"
echo
