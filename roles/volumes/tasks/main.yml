- name: get rid of /mnt/ -mount created by cloud-init
  mount:
    name: /mnt
    state: absent

- name: format new image volume
  filesystem:
    dev: "{{ vol_image_device }}"
    fstype: xfs
    opts: "-L IMAGES"
  when: vol_image_device|d()
  become: True

- name: mount image device
  mount:
    name: /var/lib/pb
    src: "LABEL=IMAGES"
    state: mounted
    fstype: xfs
  when: vol_image_device|d()
  become: True

  # this is for convenience so cloud-user can copy things directly and not
  # have to upload to temp and copy as super user
- name: set permissions on image volume mount
  file:
    name: /var/lib/pb/docker_images
    state: directory
    owner: cloud-user
    group: cloud-user
    recurse: true
  when: vol_image_device|d()
  become: True

- name: format backup volume
  filesystem:
    dev: "{{ vol_backup_device }}"
    fstype: xfs
    opts: "-L BACKUP"
  when: vol_backup_device|d()
  become: True

- name: set backup dir location
  set_fact:
    backup_dir: /var/lib/pb/backup/
  when: vol_backup_device|d()

- name: mount backup device
  mount:
    name: "{{ backup_dir }}"
    src: "LABEL=BACKUP"
    state: mounted
    fstype: xfs
  when: vol_backup_device|d()
  become: True

- name: set permissions on backup volume mount
  file:
    name: "{{ backup_dir }}"
    state: directory
    owner: cloud-user
    group: cloud-user
  when: vol_backup_device|d()
  become: True

- when:
    - docker_storage_driver | default('overlay2') == 'overlay2'
    - vol_lib_docker_device|d()
  become: True
  block:
    - name: format docker storage device when using overlay2 storage driver
      filesystem:
        dev: "{{ vol_lib_docker_device }}"
        fstype: xfs
        opts: "-L DOCKER"

    - name: mount docker storage device when using overlay2 storage driver
      mount:
        name: "/var/lib/docker"
        src: "LABEL=DOCKER"
        state: mounted
        fstype: xfs

- when: vol_k3slib_device|d()
  become: True
  block:
    - name: format k3slib storage device
      filesystem:
        dev: "{{ vol_k3slib_device }}"
        fstype: xfs
        opts: "-L K3SLIB"
        force: yes
      failed_when: false

    - name: mount k3slib storage
      mount:
        name: "/var/lib/rancher/k3s"
        src: "LABEL=K3SLIB"
        state: mounted
        fstype: xfs

- when: vol_nfs_device|d()
  become: True
  block:
    - name: install LVM tools
      dnf:
        name: lvm2
        state: present

    # return code will be 5 if the VG does not exist
    - name: scan for nfs volume group
      command: vgdisplay vg_nfs
      register: test_vg
      ignore_errors: yes
      failed_when: false
      changed_when: false

    - name: pvcreate NFS device
      shell: "pvcreate {{ vol_nfs_device }}"
      when: test_vg.rc==5

    - name: Create volume group vg_nfs on {{ vol_nfs_device }}
      lvg:
        vg: vg_nfs
        pvs: "{{ vol_nfs_device }}"
      when: test_vg.rc==5

    - name: Create logical volume vg_nfs/data
      lvol:
        vg: vg_nfs
        lv: data
        size: "99%VG"
        shrink: false
      when: test_vg.rc==5

    - name: format NFS export storage device
      filesystem:
        dev: "/dev/vg_nfs/data"
        fstype: xfs
        opts: "-L NFSEXPORT"
      when: test_vg.rc==5

    - name: mount NFS export storage storage
      mount:
        name: "/export"
        src: "LABEL=NFSEXPORT"
        state: mounted
        fstype: xfs
        opts: defaults,pquota
