# Default values for pebbles

# Images to deploy
dbImage: centos/postgresql-95-centos7:latest
imagePrefix: ''
apiImage: pebbles:latest
workerImage: pebbles:latest
frontendImage: pebbles-frontend:latest
filebeatImage: filebeat:latest
logstashImage: logstash:latest

# To avoid remote pulling with local kubernetes, you can set these to 'IfNotPresent'
dbImagePullPolicy: Always
apiImagePullPolicy: Always
workerImagePullPolicy: Always
frontendImagePullPolicy: Always
logstashImagePullPolicy: Always

# Database volume size (undefined or empty means no persistent storage)
#databaseVolumeSize: 1Gi

# Resources for api
apiReplicas: 1
apiMemoryRequest: 300Mi
apiMemoryLimit: 300Mi
apiCpuRequest: 100m
apiCpuLimit: 1900m

# Resources for worker
workerReplicas: 1
workerMemoryRequest: 200Mi
workerMemoryLimit: 200Mi
workerCpuRequest: 100m
workerCpuLimit: 1900m

# Resources for db
dbMemoryRequest: 200Mi
dbMemoryLimit: 200Mi
dbCpuRequest: 100m
dbCpuLimit: 1900m

# Resources for frontend
frontendReplicas: 1
frontendMemoryRequest: 200Mi
frontendMemoryLimit: 200Mi
frontendCpuRequest: 100m
frontendCpuLimit: 1900m

# Database connection URI.
# __PASSWORD__ will be replaced with databasePassword by Pebbles api server during startup
databaseUri: postgresql://pebbles:__PASSWORD__@db/pebbles

# Database password. If not set, a random value is used.
#databasePassword: pebbles

# Master secret key for API. If not set, a random value is used
#pbSecretKey: unsafe_danger_danger

# To retain secrets between deployment updates, generated secret is only updated/created
# when overrideSecret is set to 'true'
#overrideSecret: false

# Ingress type can be 'Ingress' for K8s ingresses or 'Route' for OpenShift Routes
ingressType: Ingress

# Ingress host
ingressHost: localhost

# IP whitelist for limiting connectivity to given ranges
#ipWhitelist: '192.168.1.0/24 10.0.0.1'

# Storage class for database
#dbStorageClass: standard-rwo

# For local development, we can mount source folder from the host
#mountHostSrc: /home/user/src/github.com/CSCfi/pebbles

# To debug api, set address for callback
#remoteDebugServerApi: host.docker.internal

# To debug worker, set address for callback
#remoteDebugServerWorker: host.docker.internal

# Run api with just one thread and reload mode
#apiDevelopmentMode: true

# Disable CORS for API for local UI development
#apiDisableCORS: true

# Mount a ReadWriteMany volume as the source. Useful for remote development
#useSourceVolume: true

# Require a node label for deployments. Useful for running all the pods on a
# system node like 'master' in a self-hosted cluster.
# nodeSelector:
#   node-role.kubernetes.io/master: "true"

# Enable or disable running database automigration on API startup
apiAutomigrateDb: false

# gunicorn extra arguments for production mode
apiGunicornExtraArgs: "--workers=4 --max-requests=200"

# The level of access for the worker service account. If the service account
# needs to be able to create namespaces, cluster admin rights are needed.
# This is the case when provisioning sessions to local cluster to non-fixed namespaces,
# in a cluster where RBAC is active, for example K3s + KubernetesLocalDriver + group namespaces.
workerServiceAccountClusterAdmin: False

# Session name prefix
sessionNamePrefix: pb-

# Default cluster
defaultCluster: "local_kubernetes"

# Cluster config is provided in local values
clusterConfig: |
  - name: example

# Passwords for clusters are provided in local values
clusterPasswords: |
  example: "not very secret"

# Kubeconfig for connecting to remote kubernetes clusters
clusterKubeconfig: |
  placeholder: "replace me with real kubeconfig"

# ----------------------------------------------------------------------------
# Optional database backups. Fill in the values, see backup-db-cronjob.yaml for details
backupEnabled: false
backup:
  name: ''
  jobImage: pebbles-deployer:latest
  jobImagePullPolicy: Always
  volumeSize: 10Gi
  dbBackupSchedule: '*/15 * * * *'
  keepDays: 1
  s3BucketName: ''
  s3cfg: ''
  encryptPublicKey: ''

# ----------------------------------------------------------------------------
# Optional central logging

# deploy logstash and filebeat sidecar containers
deployCentralLogging: true

#logstashStorageClass: standard-rwo
#logstashVolumeSize: 1Gi

# Resources for logstash
logstashMemoryRequest: 1024Mi
logstashMemoryLimit: 1024Mi
logstashCpuRequest: 100m
logstashCpuLimit: 1900m

# Option to deploy private image registry
private_registry_enabled: false

# ----------------------------------------------------------------------------
# Optional oauth2 settings
oauth2LoginEnabled: false

# oauth2-proxy basic deployment config
oauth2ProxyReplicas: 1
oauth2ProxyImage: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3

# Resources for oauth2-proxy
oauth2MemoryRequest: 512Mi
oauth2MemoryLimit: 512Mi
oauth2CpuRequest: 100m
oauth2CpuLimit: 1900m

# Callback URL for the proxy. The default is for local K8s deployment
oauth2ProxyRedirectUrl: http://localhost/oauth2/callback

# Client ID and Secret must be defined
#oauth2ProxyClientId: ''
#oauth2ProxyClientSecret: ''

# Optionally set a provider and issuer url. If not set, Google authentication is assumed.
#oauth2ProxyProvider: 'oidc'
#oauth2ProxyOidcIssuerUrl: 'https://test-user-auth.csc.fi'

# Set a persistent cookie secret if needed. Because only the login access to create a new session
# goes through oauth2-proxy in Pebbles, it is also ok to leave this undefined and let Helm generate
# a random value every time the deployment is upgraded.
#oauth2ProxyCookieSecret: change_me

# Provide configuration for different oauth2 config options.
# Probably only works with CSC's authentication proxy for now.
#  authConfig: |
#    oauth2:
#      openidConfigurationUrl: https://user-auth.csc.fi/.well-known/openid-configuration
#      authMethods:
#        - acr: https://test-user-auth.csc.fi/LoginHaka
#          prefix: haka
#          idClaim: eppn
#        - acr: ...

# Control how installation is presented to the user. These values are served by public variables and
# picked up by the frontend. All of these have defaults in config.py.
#installationName: ""
#shortDescription: ""
#installationDescription: ""
#courseRequestFormUrl: ""
#brandImageUrl: ""
#termsOfUseUrl: ""
#accessibilityStatementUrl: ""
#contactEmail: ""
#serviceDocumentationUrl: ""

# Optionally set title, privacy policy link and image logo path for agreement acceptance dialog.
#agreementTitle: Service_name
#agreementTermsPath: https://terms-link
#agreementCookiesPath: https://cookies-link
#agreementPrivacyPath: https://privacy-link
#agreementLogoPath: assets/images/login/csc_front_logo.jpg

# The url that is used in generated absolute hyperlinks
#baseUrl: http://localhost
