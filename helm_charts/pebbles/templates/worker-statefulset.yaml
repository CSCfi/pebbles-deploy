apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: worker
spec:
  serviceName: worker
  selector:
    matchLabels:
      name: worker
  replicas: {{ .Values.workerReplicas }}
  template:
    metadata:
      labels:
        name: worker
    spec:
      serviceAccount: worker
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: wait-for-api
          image: {{ .Values.imagePrefix }}{{ .Values.workerImage }}
          imagePullPolicy: {{ .Values.workerImagePullPolicy }}
          command:
            - bash
            - -c
            - until curl -s -m 1 -o /dev/null api:8080/api/v1/config; do echo waiting for api; sleep 1; done
        {{- if .Values.useSourceVolume }}
        - name: init-source-volume
          image: {{ .Values.imagePrefix }}{{ .Values.workerImage }}
          imagePullPolicy: {{ .Values.workerImagePullPolicy }}
          command:
            - bash
            - -c
            - if [[ ! -d /mnt/source-volume/pebbles ]]; then rsync -avi /opt/app-root/src/* /mnt/source-volume/.; fi
          volumeMounts:
            - name: src
              mountPath: /mnt/source-volume

        {{- end }}
      containers:
        - name: worker
          image: {{ .Values.imagePrefix }}{{ .Values.workerImage }}
          imagePullPolicy: {{ .Values.workerImagePullPolicy }}
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
            limits:
              cpu: 1
              memory: 200Mi
          command:
            - python
            - pebbles/worker/main.py
          env:
            - name: PYTHONPATH
              value: /opt/app-root/src
            - name: PB_INTERNAL_API_BASE_URL
              value: http://api:8080/api/v1
            - name: WORKER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PB_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: pebbles
                  key: pb-secret-key
            - name: PB_ENABLE_FILE_LOGGING
              value: '1'
            {{- if .Values.remoteDebugServerWorker }}
            - name: REMOTE_DEBUG_SERVER
              value: {{ .Values.remoteDebugServerWorker }}
            {{- end }}
          volumeMounts:
            - name: cluster-config
              mountPath: "/run/secrets/pebbles/cluster-config.yaml"
              subPath: cluster-config.yaml
            - name: cluster-passwords
              mountPath: "/run/secrets/pebbles/cluster-passwords.yaml"
              subPath: cluster-passwords.yaml
            - name: log
              mountPath: /opt/log
          {{- if or .Values.mountHostSrc .Values.useSourceVolume }}
            - name: src
              mountPath: /opt/app-root/src
          {{- end }}
        {{- if .Values.deployCentralLogging }}
        - name: filebeat
          image: {{ .Values.imagePrefix }}filebeat:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 100m
              memory: 100Mi
          securityContext:
            runAsGroup: 0
          volumeMounts:
            - mountPath: /opt/log
              name: log
        {{- end }}
      volumes:
        - name: cluster-config
          secret:
            secretName: cluster-config
        - name: cluster-passwords
          secret:
            secretName: cluster-passwords
        - name: log
          emptyDir: {}
      {{- if .Values.mountHostSrc }}
        - name: src
          hostPath:
            path: {{ .Values.mountHostSrc }}
            type: Directory
      {{- end }}
      {{- if .Values.useSourceVolume }}
        - name: src
          persistentVolumeClaim:
            claimName: source
      {{- end }}
