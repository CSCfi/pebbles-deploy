apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    description: Pebbles API
  name: api
spec:
  replicas: {{ .Values.apiReplicas }}
  selector:
    matchLabels:
      name: api
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: "api"
        dbAccess: "true"
        logstashAccess: "true"
      name: api
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- range $key, $value := .Values.nodeSelector }}
        {{ $key }}: "{{ $value}}"
        {{- end }}
      {{- end }}
      initContainers:
        - name: wait-for-db
          image: {{ .Values.dbImage }}
          imagePullPolicy: {{ .Values.dbImagePullPolicy }}
          command:
            - bash
            - -c
            - until pg_isready -h db; do echo "waiting for db to respond"; sleep 2; done

      {{- if .Values.apiAutomigrateDb }}
        - name: automigration
          image: {{ .Values.imagePrefix }}{{ .Values.apiImage }}
          imagePullPolicy: {{ .Values.apiImagePullPolicy }}
          env:
            - name: FLASK_APP
              value: pebbles.server:app
            - name: PB_SQLALCHEMY_DATABASE_URI
              value: {{ .Values.databaseUri }}
            - name: PB_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pebbles
                  key: database-password
          command:
            - bash
            - -c
            - |
              echo "Migrating DB to the latest revision"
              flask db upgrade
              echo "Migration done"
          {{- if .Values.mountHostSrc }}
          volumeMounts:
            - mountPath: /opt/app-root/src
              name: src
          {{- end }}
      {{- end }}
      containers:
        - name: api
          env:
            - name: APP_SCRIPT
              value: /opt/app-root/src/deployment/run_gunicorn.bash
            - name: APP_MODULE
              value: pebbles.server:app
            - name: FLASK_APP
              value: pebbles.server:app
            - name: PB_SQLALCHEMY_DATABASE_URI
              value: {{ .Values.databaseUri }}
            - name: PB_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pebbles
                  key: database-password
            {{- if .Values.instanceNamePrefix }}
            - name: PB_INSTANCE_NAME_PREFIX
              value: {{ .Values.instanceNamePrefix }}
            {{- end }}
            - name: PB_DEBUG
              value: '1'
            - name: PB_ENABLE_FILE_LOGGING
              value: '1'
            - name: PB_DEFAULT_CLUSTER
              value: {{ .Values.defaultCluster }}
            {{- if .Values.apiDevelopmentMode }}
            - name: GUNICORN_CMD_ARGS
              value: >-
                --access-logfile=/opt/log/access.log
                --log-file=/opt/log/error.log
                --workers=1
                --reload
            {{- else }}
            - name: GUNICORN_CMD_ARGS
              value: >-
                --access-logfile=/opt/log/access.log
                --log-file=/opt/log/error.log
                {{ .Values.apiGunicornExtraArgs }}
            {{- end }}
            {{- if .Values.remoteDebugServerApi }}
            - name: REMOTE_DEBUG_SERVER
              value: {{ .Values.remoteDebugServerApi }}
            {{- end }}
            {{- if .Values.apiDisableCORS }}
            - name: DISABLE_CORS
              value: "{{ .Values.apiDisableCORS }}"
            {{- end }}
            - name: PB_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: pebbles
                  key: pb-secret-key
            {{- if .Values.oauth2LoginEnabled }}
            - name: PB_OAUTH2_LOGIN_ENABLED
              value: '1'
            {{- end }}
            {{- if .Values.agreementTitle }}
            - name: PB_AGREEMENT_TITLE
              value: {{ .Values.agreementTitle }}
            {{- end }}
            {{- if .Values.agreementTermsPath }}
            - name: PB_AGREEMENT_TERMS_PATH
              value: {{ .Values.agreementTermsPath }}
            {{- end }}
            {{- if .Values.agreementCookiesPath }}
            - name: PB_AGREEMENT_COOKIES_PATH
              value: {{ .Values.agreementCookiesPath }}
            {{- end }}
            {{- if .Values.agreementPrivacyPath  }}
            - name: PB_AGREEMENT_PRIVACY_PATH
              value: {{ .Values.agreementPrivacyPath }}
            {{- end }}
            {{- if .Values.agreementLogoPath }}
            - name: PB_AGREEMENT_LOGO_PATH
              value: {{ .Values.agreementLogoPath }}
            {{- end }}
            {{- if .Values.baseUrl }}
            - name: PB_BASE_URL
              value: {{ .Values.baseUrl }}
            {{- end }}

          image: {{ .Values.imagePrefix }}{{ .Values.apiImage }}
          imagePullPolicy: {{ .Values.apiImagePullPolicy }}
          resources:
            requests:
              cpu: {{ .Values.apiCpuRequest }}
              memory: {{ .Values.apiMemoryRequest }}
            limits:
              cpu: {{ .Values.apiCpuLimit }}
              memory: {{ .Values.apiMemoryLimit }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          volumeMounts:
            - name: cluster-config
              mountPath: "/run/secrets/pebbles/cluster-config.yaml"
              subPath: cluster-config.yaml
            - name: api-configmap
              mountPath: /run/configmaps/pebbles/api-configmap/
            - mountPath: /opt/log
              name: log
          {{- if .Values.mountHostSrc }}
            - mountPath: /opt/app-root/src
              name: src
          {{- end }}
        {{- if .Values.deployCentralLogging }}
        - name: filebeat
          image: {{ .Values.imagePrefix }}filebeat:latest
          imagePullPolicy: {{ .Values.apiImagePullPolicy }}
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 100m
              memory: 100Mi
          securityContext:
            runAsGroup: 0
          volumeMounts:
            - mountPath: /opt/log
              name: log
        {{- end }}
      volumes:
        - name: cluster-config
          secret:
            secretName: cluster-config
        - name: api-configmap
          configMap:
            name: api-configmap
        - name: log
          emptyDir: {}
      {{- if .Values.mountHostSrc }}
        - name: src
          hostPath:
            path: {{ .Values.mountHostSrc }}
            type: Directory
      {{- end }}
