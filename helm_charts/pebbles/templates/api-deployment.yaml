apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    description: Pebbles API
  name: api
spec:
  replicas: {{ .Values.apiReplicas }}
  selector:
    matchLabels:
      name: api
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: api
      name: api
    spec:
      initContainers:
        - name: wait-for-db
          image: {{ .Values.dbImage }}
          imagePullPolicy: {{ .Values.dbImagePullPolicy }}
          command:
            - bash
            - -c
            - until pg_isready -h db; do echo "waiting for db to respond"; sleep 2; done
      containers:
        - env:
            - name: APP_MODULE
              value: pebbles.server:app
            - name: PB_SQLALCHEMY_DATABASE_URI
              value: postgresql://pebbles:__PASSWORD__@db/pebbles
            - name: PB_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pebbles
                  key: database-password
            - name: PB_DB_AUTOMIGRATION
              value: '1'
            - name: PB_DEBUG
              value: '1'
            - name: DB_AUTOMIGRATION
              value: '1'
            - name: DEBUG
              value: '1'
            {{- if .Values.apiDevelopmentMode }}
            - name: GUNICORN_CMD_ARGS
              value: --workers=1 --reload
            {{- end }}
            {{- if .Values.remoteDebugServerApi }}
            - name: REMOTE_DEBUG_SERVER
              value: {{ .Values.remoteDebugServerApi }}
            {{- end }}
            - name: PB_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: pebbles
                  key: pb-secret-key
          image: {{ .Values.apiImage }}
          imagePullPolicy: {{ .Values.apiImagePullPolicy }}
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: api
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          {{- if .Values.mountHostSrc }}
          volumeMounts:
            - mountPath: /opt/app-root/src
              name: src
          {{- end }}
      {{- if .Values.mountHostSrc }}
      volumes:
        - name: src
          hostPath:
            path: {{ .Values.mountHostSrc }}
            type: Directory
      {{- end }}
